两个数据概念:
1. 字段定义 表头中的内容,用来表明一个字段的类型信息,与内容无关
2. 数据内容 填充的数据内容,用来给表头对应的字段赋值

!!!!重要!!!!!有效数据表:
A1格子必须填入**,表明是一个有效数据表
然后在下面开始定义表格字段,定义完成后再以**结束,表明表头定义完成,目前表头定义支持5部分内容.对应含义及功能在下面逐条介绍
1) 字段名
2) 类型
3) 导出
4) 内容描述
5) 检查规则
excel中第一行的剩余单元格内,可以继续写对应列字段的导出平台.#开头是任何平台都不导出的字段,剩余字符串中只要包含平台名称就会导出
excel中第一列的剩余单元格内,可以继续写对应行数据的导出平台,#开头是任何平台都不导出的数据,剩余字符串中只要包含此次导出平台名称就会导出

1. 字段名 -- 表达一个excel表中导出后有哪些字段
	命名规范:
		1) 支持纯英文\数字\下划线,不能以数字开头
		2) 首字母小写,每个单词之间使用下划线'_'分割开(仅建议,不强制)
		3) 不支持特殊符号,不要使用中文
	**示例: item_count	target_id
	**注释:以#开头的字段名将会被忽略,导表时不会导出对应字段,以及下面的内容

2. 类型 -- 表达改字段以何种方式存储数据,存储的是什么类型的数据.
	支持的类型包含以下三大类:
	单一类型
		基础类型
			int:整型
			float 浮点型(导表工具使用定点数存储,不用担心丢失精度)
			string 字符串型
			vector2\vector3\vector4 向量
			vec2\vec3\vec4 向量缩写
		自定义类型
			枚举类型,在xml文件中定义枚举名称\别名\值. 类型处填入枚举值即可,例如EBattleType
			对象类型,在xml文件中定义扩展的对象名称\字段等信息,在类型处填入对象类型名即可,例如ItemConsume
			TODO:常量类型
	列表类型
		任何单一类型名称后面加上'[]'表明该类型为一个列表类型
		例如:int[]\ vec2[]\ EBattleType[]\ ItemConsume[] 等

3. 导出类型 -- 对字段的导出限制
	导出端配置:
		在excel中的字段下的导出一行,配置导出类型.
		c\C表示仅客户端导出
		s\S表示仅服务器导出
		cs\sc\CS\SC表示客户端和服务器一起导出
		不填写默认cs,即客户端和服务器都需要导出
	TODO:
	导出版本限定:
		可以自定义多个表格版本,如jp\bz\dev等,导表时使用命令行传入所需版本名称,只有匹配上的字段才会导出,如果不添加限定,则默认任何版本下都导出
	**两种配置之间使用&符号连接.不区分先后顺序,即可以配置c&jp,也可以配置jp&c
	**版本限定支持多个合并,比如c&jp&bz,这样只有dev版本下才不会导出

4. 内容描述和限定 -- 表达对字段下所填数据内容的修饰.比如指定哪个字段作为key值
	1) key值指定
		写入'key',则可以手动指定该数据表的key值字段,TODO:如果不指定默认使用从左到右第一个有效列字段作为key值(使用#注释掉的列不算有效列)
	2) 默认值指定
		使用default=xxx来为该列的所有配置指定一个默认值,
		例如:
			int列配置default=128,该列的所有未填数据的格子,都将自动填充数值为128;
			int[]列配置default=0,0,则该列所有未填入数据的格子都将是{0,0};
			int[]default=0,则该列所有未填入数据的格子都是{0}.
		还可以直接填入default=nil或者default=null.(nil和null不区分大小写),指定不填入的值为空值
		如果不指定nil或者null
			单一类型默认值:
				int\float默认值为0, vector2默认值(0,0), vector3默认值(0,0,0), vector4默认值(0,0,0,0),string默认值"",自定义枚举类型值为0,自定义object为null
			列表类型默认值: 对应单一类型的长度为0的数组,不是null.
	3) 手动指定分割符
		sep=x表明x为指定分割符,分割符是将字符串处理成正确类型时所需要的字符
			1>不同类型的默认分隔符:
				单一类型:
					vector类型,使用','分割不同的数值,不填入值为0,比如 vec3类型 内容配置为'1',转完结果为(1,0); 内容配置',1',转完结果为(0,1)
					自定义对象类型的字段之间使用分割符'_'来分割,比如通过obj定义的消耗对象
					<obj type="Consume">
						<var name="item_id" type="int" out="cs"/>
						<var name="use_count" type="int"/>
					</obj>
					内容配置时使用:10025_25
				列表类型:
					字符串列表,默认分割符为'|',其余所有的列表类型默认分隔符均为','
					当配置vector[]时,可以使用小括号将数据分组,例如'(1,0),(0,0)',则会生成两个向量(1,0)和(0,0),如果配置成1,0,0,0,则生成出错
			2> 手动指定分割符的作用,如果用不到可以不配置
				主要是为了excel的可读性,分隔符可以指定为任何单一字符,比如   '*'   '和'
				配置时使用: 'sep=和',内容配置 '1,0和0,0',(这里因为没有重复的分割符,不会导致歧义,所以不再需要使用括号分组)

				比如上面xml中自定义了一个消耗类型(Consume),包含两个字段 item_id,use_count
				那配置时指定分割符为*: 'sep=*',内容配置为'10025*25',来表达一次消耗为25个id为10025的道具

				再骚一点,在xml定义自定义类的字段名称时,可以指定内容填充索引
				<obj type="Consume">
					<var name="item_id" type="int" out="cs" index="2"/>
					<var name="use_count" type="int" index="1"/>
				</obj>
				将count的index设置为1, id的index设置为2,并且手动指定分割符为'sep=个',那么在配置内容时,可以直接写入'25个10025'
				还有别名机制,可以直接让填入的内容为'25个测试道具',其中'测试道具'为具体的道具名称.这里不再细展开,具体使用将在别名定义处描述.
				手动指定的分割符同时对default内容生效,请保证default内容和手填写内容格式一致
			3> 多级分隔符
				目前分割符有三个等级,从最外层到最内层分别是 :   '|'   ','   '_'
				'_'为自定义对象类型的字段数据默认分割符, ','为常见的分割符,  '|'为字符串数组的独立分割符
				当配置结果嵌套多层时,可以使用sep=xxx来指定3个分割符,第一个分割符表示最上级分隔符
				比如我想配置一个上面xml中定义的Consume[]
				指定 'sep=和个' ,内容填写时就可以填入'25个10025和30个10026'
				指定 'sep=,个' ,内容填写时就可以填入'25个10025,30个10026'
				第一个分隔符表达第一层的切割符号,'个'表示第二层的切割符号,支持无限
			4> 分组
				支持嵌套,使用()进行分组就行了
				比如我在Consume基础之上又定义了一层obj
				<obj type="UseObj">
						<var name="obj" type="ObjType" out="cs" index="1" />
						<var name="enum" type="EnumType" index="2" />
						<var name="listint" type="int[]" index ="3" />
				</obj>
				有一个UseObj类型的字段,则可以填入(10_20)_Long_(1,2,3),其中'_'为类型默认分隔符, (1,2,3)中的','为int数组默认分隔符
	4)引用定义 'ref=xxx.xxx'
		如果定义了'ref=EBattleType',则该字段对应数据内容值都需要是EBattleType中的值,EBattleType只定义234,然后再字段内容中却填入了5,则会报错.对应行的数据都将无法生成
		如果定义了'ref=Item.id',则该字段对应数据内容值都需要在Item表中的id字段出现过该值,否则将会报错,对应行数据无法生成
		该字段的意义主要是为了让不同配置表之前能够形成关联,防止删除其他表格数据后,某个配置还没有更新,引发报错等问题.
		xml中如果要定义该限定,直接在后面增加一个 ref="xxx"的字段即可.
		比如道具消耗类
		<obj type="Consume">
				<var name="item_id" type="int" out="cs" ref="Item.id"/>
				<var name="use_count" type="int" index="1"/>
		</obj>
		在excel中定义该限定,使用&和其他描述限定相连即可.

	完整的例子:  比如一个vector2[]类型的字段,需要保证后面填入的内容都在ValidPos表中的value项中出现过
	default=(0,0)+(1,1)&sep=+,&ref=ValidPos.value








